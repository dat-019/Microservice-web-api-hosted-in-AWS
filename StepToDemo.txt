1. ECS components:
   a. Create your custom cluster in ECS
   b. Create api project(s) (using ASP.NET CORE WebApi project type) with Dockerfile to build and package an api project into docker image and stored in local docker repository.
   c. Create task defination (define docker container(s) with storage capacity / cpu usage from built image(s) in (b) above).
   d. Create build and deploy scripts (using AWS CLI with Bash)
   e. Deploy task defination into ECS
   f. Deploy built docker images into ECS Repository
   g. Create Elastic Load Balancing
   h. Create EC2 instances (two) with 'ecs-optimized' behavior. At the new step, eddit User-Data attribute of the instance to include it into our cluster.
   i. Create new service with 2 tasks, with above created task defination and load balancing (type is Network Load Balancing). 
      The tasks will be created automatically and pull docker images from ECS repository into EC2 instacnes to create coresponding docker containers.
   j. Check existing the ECS Load balancing, a new target group was auto created with existing listener port (80). There are 2 targets inside the target group.
   k. Manually: 
      	Inside the load balaning, create new listener with port 81.
	Create new target group, add 2 remaining running docker containers as 2 targets in this target group. Note: make sure the listening ports are correct.
	Associate the listener with the target group
   l. Create new API Getway
   m. Create new VPCLink as the bridge between the Getway API and the Load Balancing
   n. Create API Getway resources
   o. For the client to call your API Getway, you must create a deployment and associated a state with it